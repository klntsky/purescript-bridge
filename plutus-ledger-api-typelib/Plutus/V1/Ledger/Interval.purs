-- File auto generated by purescript-bridge! --
module Plutus.V1.Ledger.Interval where

import Prelude

import ConstrIndices (class HasConstrIndices, fromConstr2Index)
import Data.Generic.Rep (class Generic)
import Data.Lens (Iso', Lens', Prism', iso, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(Nothing, Just))
import Data.Newtype (class Newtype)
import Data.Show.Generic (genericShow)
import Data.Tuple (Tuple(Tuple))
import FromData (class FromData, genericFromData)
import ToData (class ToData, genericToData)
import Type.Proxy (Proxy(Proxy))

newtype Interval a = Interval
  { ivFrom :: LowerBound a
  , ivTo :: UpperBound a
  }

instance (Show a) => Show (Interval a) where
  show a = genericShow a

derive instance Generic (Interval a) _

derive instance Newtype (Interval a) _

instance HasConstrIndices (Interval a) where
  constrIndices _ = fromConstr2Index [Tuple "Interval" 0]

instance (ToData a) => ToData (Interval a) where
  toData x = genericToData x

instance (FromData a) => FromData (Interval a) where
  fromData pd = genericFromData pd

--------------------------------------------------------------------------------

_Interval :: forall a. Iso' (Interval a) {ivFrom :: LowerBound a, ivTo :: UpperBound a}
_Interval = _Newtype

--------------------------------------------------------------------------------

data LowerBound a = LowerBound (Extended a) Boolean

instance (Show a) => Show (LowerBound a) where
  show a = genericShow a

derive instance Generic (LowerBound a) _

instance HasConstrIndices (LowerBound a) where
  constrIndices _ = fromConstr2Index [Tuple "LowerBound" 0]

instance (ToData a) => ToData (LowerBound a) where
  toData x = genericToData x

instance (FromData a) => FromData (LowerBound a) where
  fromData pd = genericFromData pd

--------------------------------------------------------------------------------

_LowerBound :: forall a. Iso' (LowerBound a) {a :: Extended a, b :: Boolean}
_LowerBound = iso (\(LowerBound a b) -> {a, b}) (\{a, b} -> (LowerBound a b))

--------------------------------------------------------------------------------

data UpperBound a = UpperBound (Extended a) Boolean

instance (Show a) => Show (UpperBound a) where
  show a = genericShow a

derive instance Generic (UpperBound a) _

instance HasConstrIndices (UpperBound a) where
  constrIndices _ = fromConstr2Index [Tuple "UpperBound" 0]

instance (ToData a) => ToData (UpperBound a) where
  toData x = genericToData x

instance (FromData a) => FromData (UpperBound a) where
  fromData pd = genericFromData pd

--------------------------------------------------------------------------------

_UpperBound :: forall a. Iso' (UpperBound a) {a :: Extended a, b :: Boolean}
_UpperBound = iso (\(UpperBound a b) -> {a, b}) (\{a, b} -> (UpperBound a b))

--------------------------------------------------------------------------------

data Extended a
  = NegInf
  | Finite a
  | PosInf

instance (Show a) => Show (Extended a) where
  show a = genericShow a

derive instance Generic (Extended a) _

instance HasConstrIndices (Extended a) where
  constrIndices _ = fromConstr2Index [Tuple "NegInf" 0,Tuple "Finite" 1,Tuple "PosInf" 2]

instance (ToData a) => ToData (Extended a) where
  toData x = genericToData x

instance (FromData a) => FromData (Extended a) where
  fromData pd = genericFromData pd

--------------------------------------------------------------------------------

_NegInf :: forall a. Prism' (Extended a) Unit
_NegInf = prism' (const NegInf) case _ of
  NegInf -> Just unit
  _ -> Nothing

_Finite :: forall a. Prism' (Extended a) a
_Finite = prism' Finite case _ of
  (Finite a) -> Just a
  _ -> Nothing

_PosInf :: forall a. Prism' (Extended a) Unit
_PosInf = prism' (const PosInf) case _ of
  PosInf -> Just unit
  _ -> Nothing
