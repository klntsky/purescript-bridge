-- File auto generated by purescript-bridge! --
module Plutus.V1.Ledger.Interval where

import Prelude

import ConstrIndices (class HasConstrIndices, fromConstr2Index)
import Data.Generic.Rep (class Generic)
import Data.Lens (Iso', Lens', Prism', iso, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(Nothing, Just))
import Data.Show.Generic (genericShow)
import Data.Tuple (Tuple(Tuple))
import FromData (class FromData, genericFromData)
import ToData (class ToData, genericToData)
import Type.Proxy (Proxy(Proxy))

data Extended a
  = NegInf
  | Finite a
  | PosInf

instance (Show a) => Show (Extended a) where
  show a = genericShow a

derive instance Generic (Extended a) _

instance HasConstrIndices (Extended a) where
  constrIndices _ = fromConstr2Index [Tuple "NegInf" 0,Tuple "Finite" 1,Tuple "PosInf" 2]

instance (ToData a) => ToData (Extended a) where
  toData x = genericToData x

instance (FromData a) => FromData (Extended a) where
  fromData pd = genericFromData pd

--------------------------------------------------------------------------------

_NegInf :: forall a. Prism' (Extended a) Unit
_NegInf = prism' (const NegInf) case _ of
  NegInf -> Just unit
  _ -> Nothing

_Finite :: forall a. Prism' (Extended a) a
_Finite = prism' Finite case _ of
  (Finite a) -> Just a
  _ -> Nothing

_PosInf :: forall a. Prism' (Extended a) Unit
_PosInf = prism' (const PosInf) case _ of
  PosInf -> Just unit
  _ -> Nothing
