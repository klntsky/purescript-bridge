-- File auto generated by purescript-bridge! --
module Plutus.V1.Ledger.Slot where

import Prelude

import ConstrIndices (class HasConstrIndices, fromConstr2Index)
import Control.Lazy (defer)
import Data.Argonaut.Core (jsonNull)
import Data.Argonaut.Decode (class DecodeJson, decodeJson)
import Data.Argonaut.Decode.Aeson ((</$\>), (</*\>), (</\>), decode, null)
import Data.Argonaut.Encode (class EncodeJson, encodeJson)
import Data.Argonaut.Encode.Aeson ((>$<), (>/\<), encode, null)
import Data.BigInt (BigInt)
import Data.Generic.Rep (class Generic)
import Data.Lens (Iso', Lens', Prism', iso, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(Nothing, Just))
import Data.Newtype (class Newtype, unwrap)
import Data.Show.Generic (genericShow)
import Data.Tuple (Tuple(Tuple))
import Data.Tuple.Nested ((/\))
import FromData (class FromData, genericFromData)
import ToData (class ToData, genericToData)
import Type.Proxy (Proxy(Proxy))
import Data.Argonaut.Decode.Aeson as D
import Data.Argonaut.Encode.Aeson as E
import Data.Map as Map

newtype Slot = Slot { getSlot :: BigInt }

instance Show Slot where
  show a = genericShow a

derive instance Eq Slot

derive instance Ord Slot

derive instance Generic Slot _

derive instance Newtype Slot _

instance HasConstrIndices Slot where
  constrIndices _ = fromConstr2Index [Tuple "Slot" 0]

instance ToData Slot where
  toData x = genericToData x

instance FromData Slot where
  fromData pd = genericFromData pd

instance EncodeJson Slot where
  encodeJson = defer \_ -> E.encode $ unwrap >$< (E.record
                                                 { getSlot: E.value :: _ BigInt })

instance DecodeJson Slot where
  decodeJson = defer \_ -> D.decode $ (Slot <$> D.record "Slot" { getSlot: D.value :: _ BigInt })

--------------------------------------------------------------------------------

_Slot :: Iso' Slot {getSlot :: BigInt}
_Slot = _Newtype
