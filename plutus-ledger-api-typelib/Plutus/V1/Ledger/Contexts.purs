-- File auto generated by purescript-bridge! --
module Plutus.V1.Ledger.Contexts where

import Prelude

import ConstrIndices (class HasConstrIndices, constrIndices, fromConstr2Index)
import Data.BigInt (BigInt)
import Data.Generic.Rep (class Generic)
import Data.Lens (Iso', Lens', Prism', iso, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(Nothing, Just))
import Data.Tuple (Tuple, Tuple(Tuple))
import FromData (class FromData, fromData, genericFromData)
import Plutus.V1.Ledger.Credential (StakingCredential)
import Plutus.V1.Ledger.Crypto (PubKeyHash)
import Plutus.V1.Ledger.DCert (DCert)
import Plutus.V1.Ledger.Interval (Interval)
import Plutus.V1.Ledger.Scripts (Datum, DatumHash)
import Plutus.V1.Ledger.Time (POSIXTime)
import Plutus.V1.Ledger.Tx (TxOut, TxOutRef)
import Plutus.V1.Ledger.TxId (TxId)
import Plutus.V1.Ledger.Value (CurrencySymbol, Value)
import ToData (class ToData, genericToData, toData)
import Type.Proxy (Proxy(Proxy))

data TxInfo = TxInfo (Array TxInInfo) (Array TxOut) Value Value (Array DCert)
  (Array (Tuple StakingCredential BigInt))
  (Interval POSIXTime)
  (Array PubKeyHash)
  (Array (Tuple DatumHash Datum))
  TxId

derive instance Generic TxInfo _

instance HasConstrIndices TxInfo where
  constrIndices _ = fromConstr2Index [ Tuple "TxInfo" 0 ]

instance ToData TxInfo where
  toData x = genericToData x

instance FromData TxInfo where
  fromData pd = genericFromData pd

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------

data TxInInfo = TxInInfo TxOutRef TxOut

derive instance Generic TxInInfo _

instance HasConstrIndices TxInInfo where
  constrIndices _ = fromConstr2Index [ Tuple "TxInInfo" 0 ]

instance ToData TxInInfo where
  toData x = genericToData x

instance FromData TxInInfo where
  fromData pd = genericFromData pd

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------

data ScriptContext = ScriptContext TxInfo ScriptPurpose

derive instance Generic ScriptContext _

instance HasConstrIndices ScriptContext where
  constrIndices _ = fromConstr2Index [ Tuple "ScriptContext" 0 ]

instance ToData ScriptContext where
  toData x = genericToData x

instance FromData ScriptContext where
  fromData pd = genericFromData pd

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------

data ScriptPurpose
  = Minting CurrencySymbol
  | Spending TxOutRef
  | Rewarding StakingCredential
  | Certifying DCert

derive instance Generic ScriptPurpose _

instance HasConstrIndices ScriptPurpose where
  constrIndices _ = fromConstr2Index
    [ Tuple "Minting" 0
    , Tuple "Spending" 1
    , Tuple "Rewarding" 2
    , Tuple "Certifying" 3
    ]

instance ToData ScriptPurpose where
  toData x = genericToData x

instance FromData ScriptPurpose where
  fromData pd = genericFromData pd

--------------------------------------------------------------------------------

_Minting :: Prism' ScriptPurpose CurrencySymbol
_Minting = prism' Minting case _ of
  (Minting a) -> Just a
  _ -> Nothing

_Spending :: Prism' ScriptPurpose TxOutRef
_Spending = prism' Spending case _ of
  (Spending a) -> Just a
  _ -> Nothing

_Rewarding :: Prism' ScriptPurpose StakingCredential
_Rewarding = prism' Rewarding case _ of
  (Rewarding a) -> Just a
  _ -> Nothing

_Certifying :: Prism' ScriptPurpose DCert
_Certifying = prism' Certifying case _ of
  (Certifying a) -> Just a
  _ -> Nothing
