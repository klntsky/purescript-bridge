-- File auto generated by purescript-bridge! --
module Plutus.V1.Ledger.Scripts where

import Prelude

import ConstrIndices (class HasConstrIndices, fromConstr2Index)
import Control.Lazy (defer)
import Data.Argonaut.Core (jsonNull)
import Data.Argonaut.Decode (class DecodeJson, decodeJson)
import Data.Argonaut.Decode.Aeson ((</$\>), (</*\>), (</\>), decode, null)
import Data.Argonaut.Encode (class EncodeJson, encodeJson)
import Data.Argonaut.Encode.Aeson ((>$<), (>/\<), encode, null)
import Data.Generic.Rep (class Generic)
import Data.Lens (Iso', Lens', Prism', iso, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(Nothing, Just))
import Data.Newtype (class Newtype, unwrap)
import Data.Show.Generic (genericShow)
import Data.Tuple (Tuple(Tuple))
import Data.Tuple.Nested ((/\))
import FromData (class FromData, genericFromData)
import ToData (class ToData, genericToData)
import Type.Proxy (Proxy(Proxy))
import Types.ByteArray (ByteArray)
import Types.PlutusData (PlutusData)
import Data.Argonaut.Decode.Aeson as D
import Data.Argonaut.Encode.Aeson as E
import Data.Map as Map

newtype Redeemer = Redeemer { getRedeemer :: PlutusData }

instance Show Redeemer where
  show a = genericShow a

derive instance Generic Redeemer _

derive instance Newtype Redeemer _

instance HasConstrIndices Redeemer where
  constrIndices _ = fromConstr2Index [Tuple "Redeemer" 0]

instance ToData Redeemer where
  toData x = genericToData x

instance FromData Redeemer where
  fromData pd = genericFromData pd

instance EncodeJson Redeemer where
  encodeJson = defer \_ -> E.encode $ unwrap >$< (E.record
                                                 { getRedeemer: E.value :: _ PlutusData })

instance DecodeJson Redeemer where
  decodeJson = defer \_ -> D.decode $ (Redeemer <$> D.record "Redeemer" { getRedeemer: D.value :: _ PlutusData })

--------------------------------------------------------------------------------

_Redeemer :: Iso' Redeemer {getRedeemer :: PlutusData}
_Redeemer = _Newtype

--------------------------------------------------------------------------------

newtype Datum = Datum { getDatum :: PlutusData }

instance Show Datum where
  show a = genericShow a

derive instance Generic Datum _

derive instance Newtype Datum _

instance HasConstrIndices Datum where
  constrIndices _ = fromConstr2Index [Tuple "Datum" 0]

instance ToData Datum where
  toData x = genericToData x

instance FromData Datum where
  fromData pd = genericFromData pd

instance EncodeJson Datum where
  encodeJson = defer \_ -> E.encode $ unwrap >$< (E.record
                                                 { getDatum: E.value :: _ PlutusData })

instance DecodeJson Datum where
  decodeJson = defer \_ -> D.decode $ (Datum <$> D.record "Datum" { getDatum: D.value :: _ PlutusData })

--------------------------------------------------------------------------------

_Datum :: Iso' Datum {getDatum :: PlutusData}
_Datum = _Newtype

--------------------------------------------------------------------------------

newtype ScriptHash = ScriptHash { getScriptHash :: ByteArray }

instance Show ScriptHash where
  show a = genericShow a

derive instance Generic ScriptHash _

derive instance Newtype ScriptHash _

instance HasConstrIndices ScriptHash where
  constrIndices _ = fromConstr2Index [Tuple "ScriptHash" 0]

instance ToData ScriptHash where
  toData x = genericToData x

instance FromData ScriptHash where
  fromData pd = genericFromData pd

instance EncodeJson ScriptHash where
  encodeJson = defer \_ -> E.encode $ unwrap >$< (E.record
                                                 { getScriptHash: E.value :: _ ByteArray })

instance DecodeJson ScriptHash where
  decodeJson = defer \_ -> D.decode $ (ScriptHash <$> D.record "ScriptHash" { getScriptHash: D.value :: _ ByteArray })

--------------------------------------------------------------------------------

_ScriptHash :: Iso' ScriptHash {getScriptHash :: ByteArray}
_ScriptHash = _Newtype

--------------------------------------------------------------------------------

newtype ValidatorHash = ValidatorHash ByteArray

instance Show ValidatorHash where
  show a = genericShow a

derive instance Generic ValidatorHash _

derive instance Newtype ValidatorHash _

instance HasConstrIndices ValidatorHash where
  constrIndices _ = fromConstr2Index [Tuple "ValidatorHash" 0]

instance ToData ValidatorHash where
  toData x = genericToData x

instance FromData ValidatorHash where
  fromData pd = genericFromData pd

instance EncodeJson ValidatorHash where
  encodeJson = defer \_ -> E.encode $ unwrap >$< E.value

instance DecodeJson ValidatorHash where
  decodeJson = defer \_ -> D.decode $ (ValidatorHash <$> D.value)

--------------------------------------------------------------------------------

_ValidatorHash :: Iso' ValidatorHash ByteArray
_ValidatorHash = _Newtype

--------------------------------------------------------------------------------

newtype DatumHash = DatumHash ByteArray

instance Show DatumHash where
  show a = genericShow a

derive instance Generic DatumHash _

derive instance Newtype DatumHash _

instance HasConstrIndices DatumHash where
  constrIndices _ = fromConstr2Index [Tuple "DatumHash" 0]

instance ToData DatumHash where
  toData x = genericToData x

instance FromData DatumHash where
  fromData pd = genericFromData pd

instance EncodeJson DatumHash where
  encodeJson = defer \_ -> E.encode $ unwrap >$< E.value

instance DecodeJson DatumHash where
  decodeJson = defer \_ -> D.decode $ (DatumHash <$> D.value)

--------------------------------------------------------------------------------

_DatumHash :: Iso' DatumHash ByteArray
_DatumHash = _Newtype

--------------------------------------------------------------------------------

newtype MintingPolicyHash = MintingPolicyHash ByteArray

instance Show MintingPolicyHash where
  show a = genericShow a

derive instance Generic MintingPolicyHash _

derive instance Newtype MintingPolicyHash _

instance HasConstrIndices MintingPolicyHash where
  constrIndices _ = fromConstr2Index [Tuple "MintingPolicyHash" 0]

instance ToData MintingPolicyHash where
  toData x = genericToData x

instance FromData MintingPolicyHash where
  fromData pd = genericFromData pd

instance EncodeJson MintingPolicyHash where
  encodeJson = defer \_ -> E.encode $ unwrap >$< E.value

instance DecodeJson MintingPolicyHash where
  decodeJson = defer \_ -> D.decode $ (MintingPolicyHash <$> D.value)

--------------------------------------------------------------------------------

_MintingPolicyHash :: Iso' MintingPolicyHash ByteArray
_MintingPolicyHash = _Newtype

--------------------------------------------------------------------------------

newtype StakeValidatorHash = StakeValidatorHash ByteArray

instance Show StakeValidatorHash where
  show a = genericShow a

derive instance Generic StakeValidatorHash _

derive instance Newtype StakeValidatorHash _

instance HasConstrIndices StakeValidatorHash where
  constrIndices _ = fromConstr2Index [Tuple "StakeValidatorHash" 0]

instance ToData StakeValidatorHash where
  toData x = genericToData x

instance FromData StakeValidatorHash where
  fromData pd = genericFromData pd

instance EncodeJson StakeValidatorHash where
  encodeJson = defer \_ -> E.encode $ unwrap >$< E.value

instance DecodeJson StakeValidatorHash where
  decodeJson = defer \_ -> D.decode $ (StakeValidatorHash <$> D.value)

--------------------------------------------------------------------------------

_StakeValidatorHash :: Iso' StakeValidatorHash ByteArray
_StakeValidatorHash = _Newtype
