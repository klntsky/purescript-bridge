-- File auto generated by purescript-bridge! --
module Plutus.V1.Ledger.Tx where

import Prelude

import ConstrIndices (class HasConstrIndices, fromConstr2Index)
import Data.BigInt (BigInt)
import Data.Generic.Rep (class Generic)
import Data.Lens (Iso', Lens', Prism', iso, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe, Maybe(Nothing, Just))
import Data.Newtype (class Newtype)
import Data.Show.Generic (genericShow)
import Data.Tuple (Tuple(Tuple))
import FromData (class FromData, genericFromData)
import Plutus.Types.Address (Address)
import Plutus.V1.Ledger.Scripts (DatumHash)
import Plutus.V1.Ledger.TxId (TxId)
import ToData (class ToData, genericToData)
import Type.Proxy (Proxy(Proxy))
import Types.Value (Value)

newtype TxOut = TxOut
  { txOutAddress :: Address
  , txOutValue :: Value
  , txOutDatumHash :: Maybe DatumHash
  }

instance Show TxOut where
  show a = genericShow a

derive instance Generic TxOut _

derive instance Newtype TxOut _

instance HasConstrIndices TxOut where
  constrIndices _ = fromConstr2Index [Tuple "TxOut" 0]

instance ToData TxOut where
  toData x = genericToData x

instance FromData TxOut where
  fromData pd = genericFromData pd

--------------------------------------------------------------------------------

_TxOut :: Iso' TxOut {txOutAddress :: Address, txOutValue :: Value, txOutDatumHash :: Maybe DatumHash}
_TxOut = _Newtype

--------------------------------------------------------------------------------

newtype TxOutRef = TxOutRef
  { txOutRefId :: TxId
  , txOutRefIdx :: BigInt
  }

instance Show TxOutRef where
  show a = genericShow a

derive instance Generic TxOutRef _

derive instance Newtype TxOutRef _

instance HasConstrIndices TxOutRef where
  constrIndices _ = fromConstr2Index [Tuple "TxOutRef" 0]

instance ToData TxOutRef where
  toData x = genericToData x

instance FromData TxOutRef where
  fromData pd = genericFromData pd

--------------------------------------------------------------------------------

_TxOutRef :: Iso' TxOutRef {txOutRefId :: TxId, txOutRefIdx :: BigInt}
_TxOutRef = _Newtype
