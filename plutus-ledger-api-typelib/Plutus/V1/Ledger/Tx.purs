-- File auto generated by purescript-bridge! --
module Plutus.V1.Ledger.Tx where

import Prelude

import ConstrIndices (class HasConstrIndices, fromConstr2Index)
import Control.Lazy (defer)
import Data.Argonaut.Core (jsonNull)
import Data.Argonaut.Decode (class DecodeJson, decodeJson)
import Data.Argonaut.Decode.Aeson ((</$\>), (</*\>), (</\>), decode, null)
import Data.Argonaut.Encode (class EncodeJson, encodeJson)
import Data.Argonaut.Encode.Aeson ((>$<), (>/\<), encode, null)
import Data.BigInt (BigInt)
import Data.Generic.Rep (class Generic)
import Data.Lens (Iso', Lens', Prism', iso, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe, Maybe(Nothing, Just))
import Data.Newtype (class Newtype, unwrap)
import Data.Show.Generic (genericShow)
import Data.Tuple (Tuple(Tuple))
import Data.Tuple.Nested ((/\))
import FromData (class FromData, genericFromData)
import Plutus.Types.Address (Address)
import Plutus.V1.Ledger.Scripts (DatumHash)
import Plutus.V1.Ledger.TxId (TxId)
import ToData (class ToData, genericToData)
import Type.Proxy (Proxy(Proxy))
import Types.Value (Value)
import Data.Argonaut.Decode.Aeson as D
import Data.Argonaut.Encode.Aeson as E
import Data.Map as Map

newtype TxOut = TxOut
  { txOutAddress :: Address
  , txOutValue :: Value
  , txOutDatumHash :: Maybe DatumHash
  }

instance Show TxOut where
  show a = genericShow a

derive instance Generic TxOut _

derive instance Newtype TxOut _

instance HasConstrIndices TxOut where
  constrIndices _ = fromConstr2Index [Tuple "TxOut" 0]

instance ToData TxOut where
  toData x = genericToData x

instance FromData TxOut where
  fromData pd = genericFromData pd

instance EncodeJson TxOut where
  encodeJson = defer \_ -> E.encode $ unwrap >$< (E.record
                                                   { txOutAddress: E.value :: _ Address
                                                   , txOutValue: E.value :: _ Value
                                                   , txOutDatumHash: (E.maybe E.value) :: _ (Maybe DatumHash)
                                                   })

instance DecodeJson TxOut where
  decodeJson = defer \_ -> D.decode $ (TxOut <$> D.record "TxOut"
      { txOutAddress: D.value :: _ Address
      , txOutValue: D.value :: _ Value
      , txOutDatumHash: (D.maybe D.value) :: _ (Maybe DatumHash)
      })

--------------------------------------------------------------------------------

_TxOut :: Iso' TxOut {txOutAddress :: Address, txOutValue :: Value, txOutDatumHash :: Maybe DatumHash}
_TxOut = _Newtype

--------------------------------------------------------------------------------

newtype TxOutRef = TxOutRef
  { txOutRefId :: TxId
  , txOutRefIdx :: BigInt
  }

instance Show TxOutRef where
  show a = genericShow a

derive instance Generic TxOutRef _

derive instance Newtype TxOutRef _

instance HasConstrIndices TxOutRef where
  constrIndices _ = fromConstr2Index [Tuple "TxOutRef" 0]

instance ToData TxOutRef where
  toData x = genericToData x

instance FromData TxOutRef where
  fromData pd = genericFromData pd

instance EncodeJson TxOutRef where
  encodeJson = defer \_ -> E.encode $ unwrap >$< (E.record
                                                   { txOutRefId: E.value :: _ TxId
                                                   , txOutRefIdx: E.value :: _ BigInt
                                                   })

instance DecodeJson TxOutRef where
  decodeJson = defer \_ -> D.decode $ (TxOutRef <$> D.record "TxOutRef"
      { txOutRefId: D.value :: _ TxId
      , txOutRefIdx: D.value :: _ BigInt
      })

--------------------------------------------------------------------------------

_TxOutRef :: Iso' TxOutRef {txOutRefId :: TxId, txOutRefIdx :: BigInt}
_TxOutRef = _Newtype
