-- File auto generated by purescript-bridge! --
module Plutus.V1.Ledger.Crypto where

import Prelude

import ConstrIndices (class HasConstrIndices, fromConstr2Index)
import Control.Lazy (defer)
import Data.Argonaut.Core (jsonNull)
import Data.Argonaut.Decode (class DecodeJson, decodeJson)
import Data.Argonaut.Decode.Aeson ((</$\>), (</*\>), (</\>), decode, null)
import Data.Argonaut.Encode (class EncodeJson, encodeJson)
import Data.Argonaut.Encode.Aeson ((>$<), (>/\<), encode, null)
import Data.Generic.Rep (class Generic)
import Data.Lens (Iso', Lens', Prism', iso, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(Nothing, Just))
import Data.Newtype (class Newtype, unwrap)
import Data.Show.Generic (genericShow)
import Data.Tuple (Tuple(Tuple))
import Data.Tuple.Nested ((/\))
import FromData (class FromData, genericFromData)
import Plutus.V1.Ledger.Bytes (LedgerBytes)
import ToData (class ToData, genericToData)
import Type.Proxy (Proxy(Proxy))
import Types.ByteArray (ByteArray)
import Data.Argonaut.Decode.Aeson as D
import Data.Argonaut.Encode.Aeson as E
import Data.Map as Map

newtype PubKey = PubKey { getPubKey :: LedgerBytes }

instance Show PubKey where
  show a = genericShow a

derive instance Generic PubKey _

derive instance Newtype PubKey _

instance HasConstrIndices PubKey where
  constrIndices _ = fromConstr2Index [Tuple "PubKey" 0]

instance ToData PubKey where
  toData x = genericToData x

instance FromData PubKey where
  fromData pd = genericFromData pd

instance EncodeJson PubKey where
  encodeJson = defer \_ -> E.encode $ unwrap >$< (E.record
                                                 { getPubKey: E.value :: _ LedgerBytes })

instance DecodeJson PubKey where
  decodeJson = defer \_ -> D.decode $ (PubKey <$> D.record "PubKey" { getPubKey: D.value :: _ LedgerBytes })

--------------------------------------------------------------------------------

_PubKey :: Iso' PubKey {getPubKey :: LedgerBytes}
_PubKey = _Newtype

--------------------------------------------------------------------------------

newtype PubKeyHash = PubKeyHash { getPubKeyHash :: ByteArray }

instance Show PubKeyHash where
  show a = genericShow a

derive instance Generic PubKeyHash _

derive instance Newtype PubKeyHash _

instance HasConstrIndices PubKeyHash where
  constrIndices _ = fromConstr2Index [Tuple "PubKeyHash" 0]

instance ToData PubKeyHash where
  toData x = genericToData x

instance FromData PubKeyHash where
  fromData pd = genericFromData pd

instance EncodeJson PubKeyHash where
  encodeJson = defer \_ -> E.encode $ unwrap >$< (E.record
                                                 { getPubKeyHash: E.value :: _ ByteArray })

instance DecodeJson PubKeyHash where
  decodeJson = defer \_ -> D.decode $ (PubKeyHash <$> D.record "PubKeyHash" { getPubKeyHash: D.value :: _ ByteArray })

--------------------------------------------------------------------------------

_PubKeyHash :: Iso' PubKeyHash {getPubKeyHash :: ByteArray}
_PubKeyHash = _Newtype

--------------------------------------------------------------------------------

newtype PrivateKey = PrivateKey { getPrivateKey :: LedgerBytes }

instance Show PrivateKey where
  show a = genericShow a

derive instance Generic PrivateKey _

derive instance Newtype PrivateKey _

instance HasConstrIndices PrivateKey where
  constrIndices _ = fromConstr2Index [Tuple "PrivateKey" 0]

instance ToData PrivateKey where
  toData x = genericToData x

instance FromData PrivateKey where
  fromData pd = genericFromData pd

instance EncodeJson PrivateKey where
  encodeJson = defer \_ -> E.encode $ unwrap >$< (E.record
                                                 { getPrivateKey: E.value :: _ LedgerBytes })

instance DecodeJson PrivateKey where
  decodeJson = defer \_ -> D.decode $ (PrivateKey <$> D.record "PrivateKey" { getPrivateKey: D.value :: _ LedgerBytes })

--------------------------------------------------------------------------------

_PrivateKey :: Iso' PrivateKey {getPrivateKey :: LedgerBytes}
_PrivateKey = _Newtype

--------------------------------------------------------------------------------

newtype Signature = Signature { getSignature :: ByteArray }

instance Show Signature where
  show a = genericShow a

derive instance Generic Signature _

derive instance Newtype Signature _

instance HasConstrIndices Signature where
  constrIndices _ = fromConstr2Index [Tuple "Signature" 0]

instance ToData Signature where
  toData x = genericToData x

instance FromData Signature where
  fromData pd = genericFromData pd

instance EncodeJson Signature where
  encodeJson = defer \_ -> E.encode $ unwrap >$< (E.record
                                                 { getSignature: E.value :: _ ByteArray })

instance DecodeJson Signature where
  decodeJson = defer \_ -> D.decode $ (Signature <$> D.record "Signature" { getSignature: D.value :: _ ByteArray })

--------------------------------------------------------------------------------

_Signature :: Iso' Signature {getSignature :: ByteArray}
_Signature = _Newtype
