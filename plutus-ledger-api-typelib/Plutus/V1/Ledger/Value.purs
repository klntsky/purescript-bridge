-- File auto generated by purescript-bridge! --
module Plutus.V1.Ledger.Value where

import Prelude

import ConstrIndices (class HasConstrIndices, fromConstr2Index)
import Control.Lazy (defer)
import Data.Argonaut.Core (jsonNull)
import Data.Argonaut.Decode (class DecodeJson, decodeJson)
import Data.Argonaut.Decode.Aeson ((</$\>), (</*\>), (</\>), decode, null)
import Data.Argonaut.Encode (class EncodeJson, encodeJson)
import Data.Argonaut.Encode.Aeson ((>$<), (>/\<), encode, null)
import Data.Generic.Rep (class Generic)
import Data.Lens (Iso', Lens', Prism', iso, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(Nothing, Just))
import Data.Newtype (class Newtype, unwrap)
import Data.Show.Generic (genericShow)
import Data.Tuple (Tuple, Tuple(Tuple))
import Data.Tuple.Nested ((/\))
import FromData (class FromData, genericFromData)
import ToData (class ToData, genericToData)
import Type.Proxy (Proxy(Proxy))
import Types.Value (CurrencySymbol, TokenName)
import Data.Argonaut.Decode.Aeson as D
import Data.Argonaut.Encode.Aeson as E
import Data.Map as Map

newtype AssetClass = AssetClass { unAssetClass :: Tuple CurrencySymbol TokenName }

instance Show AssetClass where
  show a = genericShow a

derive instance Eq AssetClass

derive instance Ord AssetClass

derive instance Generic AssetClass _

derive instance Newtype AssetClass _

instance HasConstrIndices AssetClass where
  constrIndices _ = fromConstr2Index [Tuple "AssetClass" 0]

instance ToData AssetClass where
  toData x = genericToData x

instance FromData AssetClass where
  fromData pd = genericFromData pd

instance EncodeJson AssetClass where
  encodeJson = defer \_ -> E.encode $ unwrap >$< (E.record
                                                 { unAssetClass: (E.tuple (E.value >/\< E.value)) :: _ (Tuple CurrencySymbol TokenName) })

instance DecodeJson AssetClass where
  decodeJson = defer \_ -> D.decode $ (AssetClass <$> D.record "AssetClass" { unAssetClass: (D.tuple (D.value </\> D.value)) :: _ (Tuple CurrencySymbol TokenName) })

--------------------------------------------------------------------------------

_AssetClass :: Iso' AssetClass {unAssetClass :: Tuple CurrencySymbol TokenName}
_AssetClass = _Newtype
